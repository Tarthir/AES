from functools import reduce
import numpy as np

class AES:
    def __init__(self) -> None:
        self.state = None
        self.cipher_key = None
        self.expanded_key = None
        self.curr_round = 0

    num_round = {4: 10, 6: 12, 8: 14}

    s_box = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]

    rgf_matrix = [[0x02, 0x03, 0x01, 0x01],
                 [0x01, 0x02, 0x03, 0x01],
                 [0x01, 0x01, 0x02, 0x03],
                 [0x03, 0x01, 0x01, 0x02]]

    # Rcon[] is 1-based, so the first entry is just a place holder
    r_con = [0x00000000,
             0x01, 0x02, 0x04, 0x08,
             0x10, 0x20, 0x40, 0x80,
             0x1B, 0x36, 0x6C, 0xD8,
             0xAB, 0x4D, 0x9A, 0x2F,
             0x5E, 0xBC, 0x63, 0xC6,
             0x97, 0x35, 0x6A, 0xD4,
             0xB3, 0x7D, 0xFA, 0xEF,
             0xC5, 0x91, 0x39, 0x72,
             0xE4, 0xD3, 0xBD, 0x61,
             0xC2, 0x9F, 0x25, 0x4A,
             0x94, 0x33, 0x66, 0xCC,
             0x83, 0x1D, 0x3A, 0x74,
             0xE8, 0xCB, 0x8D]

    def __init__(self) -> None:
        self.state = None
        self.cipher_key = None
        self.rgf_matrix = np.array(self.rgf_matrix)

    def bin_number(self, num):
        # turn the number into a bit string and take of the '0b' at the beginning
        return ((bin(num))[2:])

    def ffAdd(self, a, b):
        return a ^ b

    def ffMultiply(self, a, b):
        p = 0
        for i in range(8):
            if a == 0 or b == 0:
                return p
            if b & 1:
                p = self.ffAdd(p, a)
            a = self.xtime(a)
            b >>= 1
        return p

    def xtime(self, num):
        if num & 0x80:
            num <<= 1
            num = self.ffAdd(num, 0x1B)
        else:
            num <<= 1
        num = num & 0xFF
        return num

    # key comes in column form, 0-3 are one column, 4-7 are one column,...
    def key_expansion(self, key, Nk):
        # lets see how many rounds we do
        Nr = self.num_round[Nk]
        # which determines how many words we will make
        Nb = Nk#(Nr + 1)
        w = [0] * (Nb * (Nr + 1))
        temp = None
        i = 0
        while i < Nk:
            w[i] = [key[4*i], key[4*i + 1], key[4*i + 2], key[4*i + 3]]
            i = i + 1
        i = Nk
        p = 0x8a ^ 0x01
        while i < (Nb * (Nr + 1)):
            temp = w[i-1]
            if (i % Nk) == 0:
                temp = self.subWord(self.rotWord(temp))
                temp[0] = self.ffAdd(temp[0], self.r_con[i//Nk])
            elif (Nk > 6) and ((i % Nk) == 4):
                temp = self.subWord(temp)
            w[i] = [self.ffAdd(a, b) for a, b in zip(w[i-Nk], temp)]
            i = i + 1
        return w

    def subWord(self, arr):
        for i in range(len(arr)):
            r = 0
            c = self.bin_number(arr[i])
            if len(c) > 4:
                r = int(c[:len(c) - 4], 2)
                c = int(c[len(c) - 4:], 2)
            else:
                c = int(c, 2)
            arr[i] = self.s_box[r][c]
        return arr

    def rotWord(self, arr):
        arr = np.array(arr)
        return np.roll(arr, -1)


    def subBytes(self, my_state):
        for i in range(4):
            for j in range(4):
                r = 0
                c = self.bin_number(my_state[i][j])
                if len(c) > 4:
                    r = int(c[:len(c) - 4], 2)
                    c = int(c[len(c) - 4:], 2)
                else:
                    c = int(c, 2)
                my_state[i][j] = self.s_box[r][c]
        return my_state

    def shift_rows(self, my_state):
        for rowIdx in range(1, 4):
            # simply rotate the list around
            my_state[rowIdx] = np.roll(my_state[rowIdx], -rowIdx)
            #my_state[rowIdx] = (my_state[rowIdx])[rowIdx:] + (my_state[rowIdx])[:rowIdx]
        return my_state

    def mix_columns(self, my_state):
        new_state = np.zeros(shape=(4, 4), dtype=np.int)
        for col in range(4):
            for row in range(4):
                new_state[row, col] = self.__mult(self.rgf_matrix[row, :], my_state[:, col])  # the new column replaces c
        return new_state

    def __mult(self, row, col):
        result = 0
        for i in range(4):
            result = self.ffAdd(result, self.ffMultiply(col[i], row[i]))
        return result

    # helper function, gets the correct index into the expanded key
    def getRoundIdx(self, num):
        return num + (4 * self.curr_round)

    # TODO make sure always getting correct part of expanded key
    def add_round_key(self, state, keys):
        new_state = np.zeros(shape=(4, 4), dtype=np.int)
        for col in range(len(state)):
            for row in range(len(state)):
                new_state[row][col] = self.ffAdd(new_state[row][col], self.ffAdd(state[row][col], self.expanded_key[self.getRoundIdx(col)][row]))
        return new_state


state =  [ [0x19,0xa0,0x9a,0xe9],
                 [0x3d,0xf4,0xc6,0xf8],
                 [0xe3,0xe2,0x8d,0x48],
                 [0xbe,0x2b,0x2a,0x08]]

sub = [[0xd4,0xe0,0xb8,0x1e],
                         [0x27,0xbf,0xb4,0x41],
                         [0x11,0x98,0x5d,0x52],
                         [0xae,0xf1,0xe5,0x30]]

shift = [[0xd4, 0xe0, 0xb8, 0x1e],
                         [0xbf, 0xb4, 0x41, 0x27],
                         [0x5d, 0x52, 0x11, 0x98],
                         [0x30, 0xae, 0xf1, 0xe5]]

mix = [[0x04, 0xe0, 0x48, 0x28],
                         [0x66, 0xcb, 0xf8, 0x06],
                         [0x81, 0x19, 0xd3, 0x26],
                         [0xe5, 0x9a, 0x7a, 0x4c]]

round = [[0xa4, 0x68, 0x6b, 0x02],
                          [0x9c, 0x9f, 0x5b, 0x6a],
                          [0x7f, 0x35, 0xea, 0x50],
                          [0xf2, 0x2b, 0x43, 0x49]]

key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
                          0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c ]

#expanded = [[0x2b, 0x7e, 0x15, 0x16], [0x28,0xae,0xd2,0xa6], [0xab,0xf7,0x15,0x88], [0x09,0xcf,0x4f,0x3c],
#                          [0xa0, 0xfa, 0xfe, 0x17], [0x88,0x54,0x2c,0xb1], [0x23,0xa3,0x39,0x39], [0x2a,0x6c,0x76,0x05],
#                          [0xf2c295f2], [0x7a96b943], [0x593580,0x7a], [0x73,0x59,0xf6,0x7f],
#                          [0x3d80477d], [0x4716fe3e], [0x1e237e,0x44], [0x6d,0x7a,0x88,0x3b],
#                          [0xef44a541], [0xa8525b7f], [0xb67125,0x3b], [0xdb,0x0b,0xad,0x00],
#                          [0xd4d1c6f8], [0x7c839d87], [0xcaf2b8,0xbc], [0x11,0xf9,0x15,0xbc],
 #                         [0x6d88a37a], [0x110b3efd], [0xdbf986,0x41], [0xca,0x00,0x93,0xfd],
 #                         [0x4e54f70e], [0x5f5fc9f3], [0x84a64f,0xb2], [0x4e,0xa6,0xdc,0x4f],
 #                         [0xead27321], [0xb58dbad2], [0x312bf5,0x60], [0x7f,0x8d,0x29,0x2f],
 #                         [0xac7766f3], [0x19fadc21], [0x28d129,0x41], [0x57,0x5c,0x00,0x6e],
 #                         [0xd014f9a8], [0xc9ee2589], [0xe13f0c,0xc8], [0xb6,0x63,0x0c,0xa6] ]
expanded = [0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c,
                          0xa0fafe17, 0x88542cb1, 0x23a33939, 0x2a6c7605,
                          0xf2c295f2, 0x7a96b943, 0x5935807a, 0x7359f67f,
                          0x3d80477d, 0x4716fe3e, 0x1e237e44, 0x6d7a883b,
                          0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00,
                          0xd4d1c6f8, 0x7c839d87, 0xcaf2b8bc, 0x11f915bc,
                          0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd,
                          0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f,
                          0xead27321, 0xb58dbad2, 0x312bf560, 0x7f8d292f,
                          0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e,
                          0xd014f9a8, 0xc9ee2589, 0xe13f0cc8, 0xb6630ca6 ]

state = np.array(state)
sub = np.array(sub)
shift = np.array(shift)
mix = np.array(mix)
key = np.array(key)
expanded = np.array(expanded)
# xtime(57) = ae
# xtime(ae) =
# ae = 1010 1110 bit shifted becomes 1 0101 1100
c = AES()
#c.state = state
if c.ffAdd(0x57, 0x83) == 0xd4 and c.xtime(0x57) == 0xae and c.xtime(0xae) == 0x47 and c.xtime(
        0x47) == 0x8e and c.xtime(0x8e) == 0x07:
    print("Success: ffAdd and xtime works!")

if c.ffMultiply(0x57, 0x13) == 0xfe:
    print("Success: ffMult works!")

if c.subWord([0x00, 0x10, 0x20, 0x30]) == [0x63, 0xca, 0xb7, 0x04] \
        and c.subWord([0x40, 0x50, 0x60, 0x70]) == [0x09, 0x53, 0xd0, 0x51] \
        and c.subWord([0x80, 0x90, 0xa0, 0xb0]) == [0xcd, 0x60, 0xe0, 0xe7] \
        and c.subWord([0xc0, 0xd0, 0xe0, 0xf0]) == [0xba, 0x70, 0xe1, 0x8c]:
    print("Success: subWord works!")

if np.array_equal(c.rotWord([0x09, 0xcf, 0x4f, 0x3c]), np.array([0xcf, 0x4f, 0x3c, 0x09])) \
        and np.array_equal(c.rotWord([0x2a, 0x6c, 0x76, 0x05]), np.array([0x6c, 0x76, 0x05, 0x2a])):
    print("Success: rotWord works!")
c.curr_round = 1
state = c.subBytes(state)
if np.array_equal(state, sub):
    print("Success: subBytes works!")
state = c.shift_rows(state)
if np.array_equal(state, shift):
    print("Success: shiftRows works!")

state = c.mix_columns(state)
if np.array_equal(state, mix):
    print("Success: mix_columns works!")

# TODO need to setup testing for this, already did it manually, looks good
c.expanded_key = c.key_expansion(key, 4)
#if w == expanded:
#    print("Success: key_expansion works!")
state = c.add_round_key(state, 4)
if np.array_equal(state, round):
    print("Success: add_round_key works!")
